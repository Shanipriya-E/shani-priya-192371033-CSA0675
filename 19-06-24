1.
Algorithm:
1. *Initialize a Min-Heap*: Use a min-heap to keep track of the smallest current node from each linked-list.
2. *Push Initial Nodes*: Push the head of each linked-list into the min-heap.
3. *Extract Minimum*: Pop the smallest node from the heap and add it to the resulting linked-list.
4. *Push Next Node*: Push the next node from the extracted nodeâ€™s linked-list into the heap.
5. *Repeat*: Continue until the heap is empty.
6. *Return*: Return the head of the merged linked-list.
code:
from heapq import heappush, heappop
from typing import List, Optional
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
    def __lt__(self, other):
        return self.val < other.val
def mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:
    min_heap = []
    for i, l in enumerate(lists):
        if l:
            heappush(min_heap, (l.val, i, l))
    dummy = ListNode()
    current = dummy
    while min_heap:
        val, i, node = heappop(min_heap)
        current.next = node
        current = current.next
        if node.next:
            heappush(min_heap, (node.next.val, i, node.next))
    return dummy.next
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.
Algorithm:
1. **Sort arr2**: To quickly find potential replacements that maintain the increasing order.
2. *DP Table*: Use a dictionary dp where the keys are possible values in the strictly increasing sequence and the values are the minimum operations needed to achieve that value.
3. **Iterate through arr1**:
   - *Update DP Table*: For each element in arr1, update the DP table considering both keeping the current element and replacing it with an element from arr2.
   - **Binary Search in arr2**: Use binary search to efficiently find the smallest larger element in arr2 that can replace the current element in arr1.
4. *Find the Result*: The minimum value in the DP table after processing all elements of arr1 represents the minimum operations required. If the DP table is empty at the end, return -1 (no way to make arr1 strictly increasing).

code:
from bisect import bisect_right
from collections import defaultdict
from typing import List
def makeArrayIncreasing(arr1: List[int], arr2: List[int]) -> int:
    arr2.sort()
    dp = {-1: 0}  
    for val in arr1:
        new_dp = defaultdict(lambda: float('inf'))
        for key in dp:
            if val > key:
                new_dp[val] = min(new_dp[val], dp[key])
            loc = bisect_right(arr2, key)
            if loc < len(arr2):
                new_dp[arr2[loc]] = min(new_dp[arr2[loc]], dp[key] + 1)
        dp = new_dp
    if dp:
        return min(dp.values())
    else:
        return -1
arr1 = [1, 5, 3, 6, 7]
arr2 = [1, 3, 2, 4]
print(makeArrayIncreasing(arr1, arr2))
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.
Algorithm:
1. **Ensure nums1 is the smaller array**: This simplifies the binary search logic.
2. *Binary Search on the Smaller Array*:
   - Partition the smaller array and compute the corresponding partition in the larger array.
   - Ensure the partitions are valid: the maximum element on the left side is less than or equal to the minimum element on the right side.
   - Adjust the binary search range based on the partition comparison results.
3. *Compute Median*:
   - If the total number of elements is odd, the median is the maximum element on the left side.
   - If the total number of elements is even, the median is the average of the maximum element on the left side and the minimum element on the right side.

Code:
from typing import List
def findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:
    if len(nums1) > len(nums2):
        nums1, nums2 = nums2, nums1
    m, n = len(nums1), len(nums2)
    imin, imax, half_len = 0, m, (m + n + 1) // 2
    while imin <= imax:
        i = (imin + imax) // 2
        j = half_len - i
        if i < m and nums1[i] < nums2[j-1]:
            imin = i + 1
        elif i > 0 and nums1[i-1] > nums2[j]:
            imax = i - 1
        else:
            if i == 0: max_of_left = nums2[j-1]
            elif j == 0: max_of_left = nums1[i-1]
            else: max_of_left = max(nums1[i-1], nums2[j-1])
            if (m + n) % 2 == 1:
                return max_of_left
            if i == m: min_of_right = nums2[j]
            elif j == n: min_of_right = nums1[i]
            else: min_of_right = min(nums1[i], nums2[j])
            return (max_of_left + min_of_right) / 2.0
nums1 = [1, 3]
nums2 = [2]
print(findMedianSortedArrays(nums1, nums2))  # Output: 2.0
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.
Algorithm:
1. *Initial Check*: If b is already a substring of a, then return 1.
2. *Calculate Minimum Repeats*: Determine the minimum number of times a needs to be repeated so that its length is at least as long as b.
3. *Check Substring*: Check if b is a substring of a repeated the calculated minimum number of times or one additional repeat.
4. *Return Result*: If b is found as a substring in the repeated string, return the number of repeats; otherwise, return -1.
Code:
def repeatedStringMatch(a: str, b: str) -> int:
    if b in a:
        return 1
    min_repeats = -(-len(b) // len(a))  
    if b in (a * min_repeats):
        return min_repeats
    if b in (a * (min_repeats + 1)):
        return min_repeats + 1
    return -1
a = "abcd"
b = "cdabcdab"
print(repeatedStringMatch(a, b))  # Output: 3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.
Algorithm:
1. *Create a Hash Map*: Store all pairs of indices and their sums in a hash map.
2. *Find Pairs of Pairs*: For each pair of numbers, check if there is another pair of numbers that together with the first pair sums up to the target.
3. *Check Distinct Indices*: Ensure that all four indices are distinct.
4. *Return the Result*: Return the first valid quadruplet found or an empty list if none is found.
 Code:
from typing import List
def fourSum(nums: List[int], target: int) -> List[List[int]]:
    n = len(nums)
    if n < 4:
        return []
    pair_sums = {}
    for i in range(n):
        for j in range(i + 1, n):
            current_sum = nums[i] + nums[j]
            if current_sum in pair_sums:
                pair_sums[current_sum].append((i, j))
            else:
                pair_sums[current_sum] = [(i, j)]
    for i in range(n):
        for j in range(i + 1, n):
            current_sum = nums[i] + nums[j]
            complement = target - current_sum
            if complement in pair_sums:
                for pair in pair_sums[complement]:
                    # Ensure all indices are distinct
                    if pair[0] != i and pair[0] != j and pair[1] != i and pair[1] != j:
                        return [nums[i], nums[j], nums[pair[0]], nums[pair[1]]]
    return []
nums = [1, 0, -1, 0, -2, 2]
target = 0
print(fourSum(nums, target))  # Output: [1, 0, -1, 0] or any other valid quadruplet summing to 0
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
