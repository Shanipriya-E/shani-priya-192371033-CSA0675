21.Algorithm:
1. Split the Linked List into Two Halves
Initialize two pointers: slow and fast.
Move the slow pointer one step and the fast pointer two steps until the fast pointer reaches the end of the list.
At this point, the slow pointer will be at the middle of the list.
Split the list into two halves by setting the next pointer of the slow pointer to None.
2. Recursively Sort the Two Halves
Recursively call the sorting function on the first half of the list.
Recursively call the sorting function on the second half of the list.
3. Merge the Sorted Halves
Implement a merge function that takes two sorted linked lists and merges them into a single sorted linked list.
The merge function should compare the values of the nodes in the two lists and append the smaller value to the result list.
Once one of the lists is exhausted, append the remaining nodes from the other list to the result list.
4. Return the Sorted Linked List
The final step is to return the head of the sorted linked list.
code:
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
def sortList(head: ListNode) -> ListNode:
    if not head or not head.next:
        return head
    slow, fast = head, head.next
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
    mid = slow.next
    slow.next = None
    left = sortList(head)
    right = sortList(mid)
    return merge(left, right)
def merge(left: ListNode, right: ListNode) -> ListNode:
    dummy = ListNode()
    curr = dummy
    while left and right:
        if left.val < right.val:
            curr.next = left
            left = left.next
        else:
            curr.next = right
            right = right.next
        curr = curr.next
    if left:
        curr.next = left
    if right:
        curr.next = right
    return dummy.next
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22.
Algorithm:
-The function initializes a count variable to keep track of the number of strings in words that contain pref as a prefix. 
-It then iterates through each string in words and checks if the string starts with the pref string using the startswith() method. 
-If a match is found, the count variable is incremented.
code:'
def numOfPrefixes(words, pref):
    count = 0
    for word in words:
        if word.startswith(pref):
            count += 1
    return count
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23.
Algorithm:
-Identify Rows and Columns with Zeroes:
-Iterate through the matrix and mark the 0th row and 0th column with a boolean flag if they contain any zeroes.
-We’ll use matrix[i][0] to denote whether the entire i-th row should be marked with zeroes, and matrix[0][j] to denote whether the entire j-th column should be marked with zeroes.
-Mark Rows and Columns:
-Iterate through the remaining rows and columns (excluding the 0th row and 0th column).
-If the cell (i, j) contains a zero, set matrix[i][0] = matrix[0][j] = 0.
-Modify the Input Matrix:
-Iterate through all rows and columns (except the 0th row and 0th column).
-Set the value of matrix[i][j] to zero if either matrix[i][0] or matrix[0][j] is zero.
-Restore the 0th Row and 0th Column:
-Finally, use the boolean flags f1 and f2 to mark the 0th row and 0th column with zeroes.
code:
# Python Solution
class Solution:
    def setZeroes(self, matrix):
        f1, f2 = False, False
        n, m = len(matrix), len(matrix[0])
        for i in range(n):
            if matrix[i][0] == 0:
                f1 = True
        for j in range(m):
            if matrix[0][j] == 0:
                f2 = True
        for i in range(1, n):
            for j in range(1, m):
                if matrix[i][j] == 0:
                    matrix[i][0] = matrix[0][j] = 0
        for i in range(1, n):
            for j in range(1, m):
                if matrix[i][0] == 0 or matrix[0][j] == 0:
                    matrix[i][j] = 0
        if f1:
            for i in range(n):
                matrix[i][0] = 0
        if f2:
            for j in range(m):
                matrix[0][j] = 0
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24.
Algorithm:
-We create two sets (set1 and set2) from the input arrays.
-The & operator computes the intersection of the sets, giving us the common elements.
-Finally, we convert the resulting set back to a list and return it.
code:
class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        set1 = set(nums1)
        set2 = set(nums2)
        result = list(set1 & set2)
        return result
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25.
Algorithm:
-we can use dynamic programming. Let’s define a function dp(i, prefix1, prefix2, isPrefix) where:
-i represents the current position in the string.
-prefix1 and prefix2 represent whether the current string prefix is equal to s1 and s2, respectively.
-isPrefix indicates whether the current string is a prefix of evil.
-We’ll initialize dp(0, True, True, True) to 1 (since an empty string satisfies all conditions). 
-Then we’ll iterate through each position in the string and update the dynamic programming table based on the conditions mentioned above.
code:
def goodStringsCount(s1, s2, evil):
    MOD = 10**9 + 7
    n = len(s1)
    def dp(i, prefix1, prefix2, isPrefix):
        if i == n:
            return 1
        if isPrefix and evil.startswith(s1[i:]):
            return 0
        count = 0
        for c in range(ord(s1[i]), ord(s2[i]) + 1):
            next_prefix1 = prefix1 and (c == ord(s1[i]))
            next_prefix2 = prefix2 and (c == ord(s2[i]))
            next_isPrefix = isPrefix and (c == ord(evil[i]))
            count = (count + dp(i + 1, next_prefix1, next_prefix2, next_isPrefix)) % MOD
        return count
    return dp(0, True, True, True)
n = 2
s1 = "aa"
s2 = "da"
evil = "b"
print(goodStringsCount(s1, s2, evil))
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
26.
algorithm:
Initialize an empty transposed matrix with dimensions equal to the number of columns and rows of the input matrix.
Iterate through each element of the input matrix.
For each element at position (i, j) in the input matrix, assign it to position (j, i) in the transposed matrix.
Return the transposed matrix as the final result.
code:
def transpose_matrix(matrix):
    """
    Returns the transpose of the input matrix.
    Args:
        matrix (List[List[int]]): A 2D integer array representing the matrix.
        
    Returns:
        List[List[int]]: The transposed matrix.
    """
    rows, cols = len(matrix), len(matrix[0])
    transposed = [[0] * rows for _ in range(cols)]
    for i in range(rows):
        for j in range(cols):
            transposed[j][i] = matrix[i][j]
    return transposed
matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
result1 = transpose_matrix(matrix1)
print(result1)  # Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
matrix2 = [[1, 2, 3], [4, 5, 6]]
result2 = transpose_matrix(matrix2)
print(result2)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
27.
algorithm:
We’ll start by understanding the pattern of the infinite integer sequence. The sequence is formed by concatenating 
the decimal representation of positive integers: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, and so on.
We’ll find the range of numbers where the nth digit lies. For example:
Numbers with 1 digit: 1 to 9 (total 9 numbers)
Numbers with 2 digits: 10 to 99 (total 90 numbers)
Numbers with 3 digits: 100 to 999 (total 900 numbers)
And so on.
Once we identify the range, we can calculate the exact number and digit position within that number.
code:
def find_nth_digit(n):
    start = 1
    length = 1
    count = 9
    while n > length * count:
        n -= length * count
        length += 1
        count *= 10
        start *= 10
    start += (n - 1) // length
    digit = str(start)[(n - 1) % length]
    return int(digit)
print(find_nth_digit(3)) 
print(find_nth_digit(11))  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8
algorithm:
We’ll start by extracting the words from the sentence and storing them in a list.
Then, we’ll iterate through each word and check if the given searchWord is a prefix of that word.
If we find a word where searchWord is a prefix, we’ll return its index (1-indexed).
If no such word exists, we’ll return 1.
code:
def find_prefix_index(sentence, searchWord):
    words = sentence.split()
    for i, word in enumerate(words, 1):
        if word.startswith(searchWord):
            return i
    return 1
sentence1 = "i love eating burger"
searchWord1 = "burg"
print(find_prefix_index(sentence1, searchWord1))
sentence2 = "hello world"
searchWord2 = "abc"
print(find_prefix_index(sentence2, searchWord2)) 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29.
algorithm:
We’ll start by understanding the given operation:
Choose two indices, i and j, where nums[i] < nums[j].
Remove the elements at indices i and j from nums.
The remaining elements retain their original order, and the array is re-indexed.
To minimize the length of nums, we need to remove as many elements as possible while maintaining the sorted order.
We’ll iterate through nums and keep track of the last valid index last_valid where nums[i] is not removed.
For each element nums[i], if it is greater than or equal to nums[last_valid], we can safely remove it. Otherwise, update last_valid to i.
The minimum length of nums after applying the operation is the difference between the original length and the count of removed elements.
code:
def min_length_after_removals(nums):
    n = len(nums)
    last_valid = 0 
    for i in range(n):
        if nums[i] >= nums[last_valid]:
            last_valid = i
        else:
    return n - (last_valid + 1)
nums1 = [1, 2, 3, 4]
print(min_length_after_removals(nums1))
nums2 = [1, 1, 2, 2, 3, 3]
print(min_length_after_removals(nums2))
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
30.
algorithm:
We’ll iterate through each word in the list.
For each word, we’ll check if it is a substring of any other word in the list.
If it is, we’ll add it to the result list.
We compare each pair of words to find if one is a substring of the other.
If a word is a substring of another, we add it to the result list.
code:
def find_substrings(words):
    result = []
    for i, word1 in enumerate(words):
        for j, word2 in enumerate(words):
            if i != j and word1 in word2:
                result.append(word1)
                break
    return result
words = ["mass", "as", "hero", "superhero"]
print(find_substrings(words))  # Output: ["as", "hero"]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


