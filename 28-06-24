1.Algorithm:
-The is_safe function checks if it is safe to place a queen on the given position (row, col) on the chessboard. 
-It checks the current row, upper diagonal, and lower diagonal on the left side to ensure that no other queen is attacking the current position.
-The solve_n_queen function is the main function that solves the N-Queen problem using a backtracking algorithm. 
-It starts by initializing an empty chessboard and then calls the backtrack function to recursively place the queens on the board.
-The backtrack function is a recursive function that tries to place a queen in each column. 
-If a queen can be placed safely, it moves on to the next column. If a queen cannot be placed in any row of the current column, it backtracks and tries a different position.
-The print_board function is used to display the final solution by printing the chessboard with the queens placed on it.
code:
def is_safe(board, row, col, n):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True
def solve_n_queen(n):
    board = [[0 for _ in range(n)] for _ in range(n)]
    def backtrack(col):
        if col == n:
            return True
        for i in range(n):
            if is_safe(board, i, col, n):
                board[i][col] = 1
                if backtrack(col + 1):
                    return True
                board[i][col] = 0
        return False
    if backtrack(0):
        print_board(board)
    else:
        print("Solution does not exist")
def print_board(board):
    for row in board:
        print(" ".join("Q" if x == 1 else "." for x in row))
        print()
solve_n_queen(4)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.
algorithm:
-The subset_sum function takes two arguments: nums, which is the set of numbers, and tnaaku veelu kadhu maarget, which is the target sum.
-We initialize a 2D boolean array dp of size (n+1) x (target+1), where n is the length of the nums list.
-The base cases are:
-If the target sum is 0, then there exists a subset (the empty subset) that adds up to 0, so we set dp[i] to True for all i.
-If the set of numbers is empty, then there exists a subset that adds up to 0 (the empty subset), but no subset that adds up to any other target sum, so we set dp[j] to False for all j > 0.
-We then fill the dp table using the following recurrence relation:
-If the current number nums[i-1] is greater than the current target sum j, then the answer is the same as the answer without including the current number, i.e., dp[i][j] = dp[i-1][j].
-Otherwise, the answer is either the answer without including the current number, i.e., dp[i-1][j], or the answer including the current number, i.e., dp[i-1][j-nums[i-1]].
code:
def subset_sum(nums, target):
    n = len(nums)
    dp = [[False] * (target + 1) for _ in range(n + 1)]
    for i in range(n + 1):
        dp[i][0] = True
    for i in range(1, n + 1):
        for j in range(1, target + 1):
            if nums[i - 1] > j:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]
    return dp[n][target]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
