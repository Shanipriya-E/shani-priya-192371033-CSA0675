1.word break problem:
Algorithm:
-This solution works by creating a dynamic programming array dp where dp[i] is True if the substring from the start to index i .
-can be broken into words from the dictionary.
-It iterates over the string and checks if the current substring can be broken into words from the dictionary. 
-If it can, it sets dp[i] to True. 
-Finally, it returns dp[-1] which indicates whether the entire string can be broken into words from the dictionary.
code:
def wordBreak(s, wordDict):
    dp = [False] * (len(s) + 1)
    dp[0] = True

    for i in range(1, len(s) + 1):
        for j in range(i):
            if dp[j] and s[j:i] in wordDict:
                dp[i] = True
                break
    return dp[-1]
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
print(wordBreak(s, wordDict)) 
time complexity:
-This solution has a time complexity of O(N^2) where N is the length of the string, and a space complexity of O(N) for the dynamic programming array. 
-This is more efficient than the recursive solution which has a time complexity of O(2^N)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.word trap problem:
Algorithm:
-Initialization:
Create a dynamic programming array dp of size len(s) + 1 and set all elements to False.
Set dp to True since an empty string can always be broken into words from the dictionary.
-Dynamic Programming:
Iterate over the string from index 1 to len(s).
For each index i, iterate over all previous indices j such that j < i.
Check if dp[j] is True and if the substring s[j:i] is in the dictionary.
If both conditions are met, set dp[i] to True and break the inner loop.
-Return:
Return dp[-1], which indicates whether the entire string can be broken into words from the dictionary.
code:
def wordBreak(s, wordDict):
    dp = [False] * (len(s) + 1)
    dp[0] = True
    for i in range(1, len(s) + 1):
        for j in range(i):
            if dp[j] and s[j:i] in wordDict:
                dp[i] = True
                break
    return dp[-1]
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
print(wordBreak(s, wordDict))  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.OBST problem:
Algorithm:
-The obst function takes three arguments:
-p: a list of probabilities of successful searches for each key.
-q: a list of probabilities of unsuccessful searches for each interval.
-n: the number of keys.
-The function returns a 2D list representing the optimal cost matrix, where cost[i][j] is the minimum cost of the optimal binary search tree for the keys from i to j.
-The algorithm works by filling the cost matrix using a bottom-up dynamic programming approach. 
-It starts with the base cases (subproblems of size 1) and then gradually builds up the solution for larger subproblems.

code:
def obst(p, q, n):
    cost = [[0] * (n + 1) for _ in range(n + 1)]
    for l in range(1, n + 1):
        min_cost = float('inf')
        for i in range(1, n - l + 2):
            j = i + l - 1
            cost[i][j] = min_cost
            for r in range(i, j + 1):
                temp = (cost[i][r - 1] if r > i else 0) + \
                       (cost[r + 1][j] if r < j else 0) + \
                       sum(p[i - 1:r]) + sum(q[i - 1:j + 1])
                if temp < cost[i][j]:
                    cost[i][j] = temp
            min_cost = cost[i][j]
    return cost
p = [0.15, 0.10, 0.05, 0.10, 0.20]
q = [0.05, 0.10, 0.05, 0.05, 0.05, 0.10]
n = 5
print(obst(p, q, n))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.floyds algorithm:
Algorithm:
-Initialization:
Create a distance matrix distance of size V x V where V is the number of vertices in the graph.
Initialize the distance matrix with the graph's adjacency matrix. If there is no edge between vertices i and j, set distance[i][j] to INF.
-Floyd Warshall Algorithm:
Run three nested loops to update the distance matrix.
For each vertex k, update the distance between vertices i and j if taking a detour through vertex k is shorter.
-Return:
Return the updated distance matrix.
code:
def floydWarshall(graph):
    V = len(graph)
    INF = 99999
    distance = [[INF for _ in range(V)] for _ in range(V)]
    for i in range(V):
        for j in range(V):
            if i == j:
                distance[i][j] = 0
            elif graph[i][j] != INF:
                distance[i][j] = graph[i][j]
    for k in range(V):
        for i in range(V):
            for j in range(V):
                if distance[i][k] + distance[k][j] < distance[i][j]:
                    distance[i][j] = distance[i][k] + distance[k][j]
    return distance
graph = [[0, 5, INF, 10],
         [INF, 0, 3, INF],
         [INF, INF, 0, 1],
         [INF, INF, INF, 0]]
print(floydWarshall(graph))
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
